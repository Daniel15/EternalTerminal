name: vcpkg CI

on:
  push:
  pull_request:

jobs: 
  build_vcpkg:
    name: ${{ matrix.os }}-hosted-pure
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows-static-md
          - os: ubuntu-latest
            triplet: x64-linux
          - os: macos-latest
            triplet: x64-osx
    env:
      CMAKE_BUILD_DIR: ${{ github.workspace }}/build/
      VCPKG_ROOT: ${{ github.workspace }}/external/vcpkg
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Setup the build agen machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@v3.19.2

      # Last command doesn't set up ninja for some reason so we do it again
      - uses: seanmiddleditch/gha-setup-ninja@master

      # Restore both vcpkg and its artifacts from the GitHub cache service.
      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v2
        with:
          # The first path is where vcpkg generates artifacts while consuming the vcpkg.json manifest file.
          # The second path is the location of vcpkg (it contains the vcpkg executable and data files).
          path: |
            ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/
            ${{ env.VCPKG_ROOT }}
          # The key is composed in a way that it get properly invalidated upon cache and trigger a new entry in the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          key: |
            ${{ hashFiles( 'vcpkg.json' ) }}-${{ hashFiles( '.git/modules/external/vcpkg/HEAD' )}}-${{ matrix.triplet }}

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1
      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install the dependencies as specified in vcpkg.json.
      - name: Install dependencies and generate project files
        run: |
          cmake -B "${{ env.CMAKE_BUILD_DIR }}" -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
      # Build the whole project with Ninja (which is spawn by CMake).
      - name: Build
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}"
      - name: Show content of workspace at its completion
        run: find $RUNNER_WORKSPACE
        shell: bash
